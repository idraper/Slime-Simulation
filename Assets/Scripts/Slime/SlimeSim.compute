#pragma kernel Update

struct Agent {
	float3 position;
	float2 angles;
	int4 speciesMask;
	int speciesIndex;
};

struct SpeciesSettings {
	float moveSpeed;
	float turnSpeed;

	float sensorAngleDegree;
	float sensorOffsetDst;
	int sensorSize;
};

StructuredBuffer<SpeciesSettings> speciesSettings;


RWStructuredBuffer<Agent> agents;
uint numAgents;

RWTexture3D<float4> TrailMap;
int width;
int height;
int depth;

float trailWeight;

float deltaTime;
float time;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}


float senseTheta(Agent agent, SpeciesSettings settings, float sensorAngleOffset) {
	float2 sensorAngles = agent.angles + float2(sensorAngleOffset,sensorAngleOffset);	
	float3 sensorDir = float3(cos(sensorAngles.x)*sin(sensorAngles.y), sin(sensorAngles.x)*sin(sensorAngles.y), cos(sensorAngles.y));

	float3 sensorPos = agent.position + sensorDir * settings.sensorOffsetDst;
	int sensorCentreX = (int) sensorPos.x;
	int sensorCentreY = (int) sensorPos.y;
	int sensorCentreZ = (int) sensorPos.z;
	float sum = 0;

	int4 senseWeight = agent.speciesMask * 2 - 1;

	for (int offsetX = -settings.sensorSize; offsetX <= settings.sensorSize; offsetX ++) {
		for (int offsetY = -settings.sensorSize; offsetY <= settings.sensorSize; offsetY ++) {			
			int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
			int sampleY = min(height - 1, max(0, sensorCentreY + offsetY));				
			sum += dot(senseWeight, TrailMap[int3(sampleX,sampleY,sensorCentreZ)]);			
		}
	}

	return sum;
}

float sensePhi(Agent agent, SpeciesSettings settings, float sensorAngleOffset) {
	float2 sensorAngles = agent.angles + float2(sensorAngleOffset,sensorAngleOffset);	
	// float3 sensorDir = float3(cos(sensorAngles.x)*sin(sensorAngles.y), sin(sensorAngles.x)*sin(sensorAngles.y), cos(sensorAngles.y));
	float3 sensorDir = float3(cos(sensorAngles.x), sin(sensorAngles.x), 0);

	float3 sensorPos = agent.position + sensorDir * settings.sensorOffsetDst;
	int sensorCentreX = (int) sensorPos.x;
	int sensorCentreY = (int) sensorPos.y;
	int sensorCentreZ = (int) sensorPos.z;
	float sum = 0;

	int4 senseWeight = agent.speciesMask * 2 - 1;

	for (int offsetX = -settings.sensorSize; offsetX <= settings.sensorSize; offsetX ++) {
		for (int offsetZ = -settings.sensorSize; offsetZ <= settings.sensorSize; offsetZ ++) {			
			int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
			int sampleZ = min(depth - 1, max(0, sensorCentreZ + offsetZ));				
			sum += dot(senseWeight, TrailMap[int3(sampleX,sensorCentreY,sampleZ)]);			
		}
	}

	return sum;
}

float2 sense(Agent agent, SpeciesSettings settings, float sensorAngleOffset) {
	float2 sensorAngles = agent.angles + float2(sensorAngleOffset,sensorAngleOffset);	
	float3 sensorDir = float3(cos(sensorAngles.x), sin(sensorAngles.x)*cos(sensorAngles.y), sin(sensorAngles.y));
	sensorDir = float3(cos(sensorAngles.x), sin(sensorAngles.x), 0);

	float3 sensorPos = agent.position + sensorDir * settings.sensorOffsetDst;
	int sensorCentreX = (int) sensorPos.x;
	int sensorCentreY = (int) sensorPos.y;
	int sensorCentreZ = (int) sensorPos.z;
	float sumX = 0;
	float sumY = 0;

	int4 senseWeight = agent.speciesMask * 2 - 1;

	for (int offsetX = -settings.sensorSize; offsetX <= settings.sensorSize; offsetX ++) {
		for (int offsetY = -settings.sensorSize; offsetY <= settings.sensorSize; offsetY ++) {			
			for (int offsetZ = -settings.sensorSize; offsetZ <= settings.sensorSize; offsetZ ++) {			
				int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
				int sampleY = min(height - 1, max(0, sensorCentreY + offsetY));
				int sampleZ = min(depth - 1, max(0, sensorCentreZ + offsetZ));				
				sumX += dot(senseWeight, TrailMap[int3(sampleX,sampleY,sensorCentreZ)]);			
				sumY += dot(senseWeight, TrailMap[int3(sampleX,sensorCentreY,sampleZ)]);			
			}
		}
	}

	// return float2(sumX, 0);
	return float2(sumX, sumY);
}

[numthreads(16,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numAgents) {
		return;
	}


	Agent agent = agents[id.x];
	SpeciesSettings settings = speciesSettings[agent.speciesIndex];
	float3 pos = agent.position;

	uint random = hash(pos.y * width + pos.x + hash(id.x + time * 100000));

	// Steer based on sensory data
	float2 sensorAngleRad = float2(settings.sensorAngleDegree * (3.1415 / 180), settings.sensorAngleDegree * (3.1415 / 180));

	float2 weightForward = sense(agent, settings, 0);
	float2 weightA = sense(agent, settings, sensorAngleRad.x);
	float2 weightB = sense(agent, settings, -sensorAngleRad.x);

	float weightForwardPhi = sensePhi(agent, settings, 0);
	float weightLeft = sensePhi(agent, settings, sensorAngleRad.x);
	float weightRight = sensePhi(agent, settings, -sensorAngleRad.x);
	weightForwardPhi = weightForward.x;
	weightLeft =  weightA.x;
	weightRight = weightB.x;

	float weightForwardTheta = senseTheta(agent, settings, 0);
	float weightUp = senseTheta(agent, settings, -sensorAngleRad.y);
	float weightDown = senseTheta(agent, settings, sensorAngleRad.y);
	weightForwardTheta = weightForward.y;
	weightUp =   weightA.y;
	weightDown = weightB.y;

	
	float randomSteerStrength = scaleToRange01(random);
	float turnSpeed = settings.turnSpeed * 2 * 3.1415;

	// Update phi (x-y) angle
	// Continue in same direction
	if (weightForwardPhi > weightLeft && weightForwardPhi > weightRight) {
		agents[id.x].angles.x += 0;
	}
	else if (weightForwardPhi < weightLeft && weightForwardPhi < weightRight) {
		agents[id.x].angles.x += (randomSteerStrength - 0.5) * 2 * turnSpeed * deltaTime;
	}
	// Turn right
	else if (weightRight > weightLeft) {
		agents[id.x].angles.x -= randomSteerStrength * turnSpeed * deltaTime;
	}
	// Turn left
	else if (weightLeft > weightRight) {
		agents[id.x].angles.x += randomSteerStrength * turnSpeed * deltaTime;
	}

	//Update theta (z) angle
	// Continue in same direction
	if (weightForwardTheta > weightDown && weightForwardTheta > weightUp) {
		agents[id.x].angles.y += 0;
	}
	else if (weightForwardTheta < weightDown && weightForwardTheta < weightUp) {
		agents[id.x].angles.y += (randomSteerStrength - 0.5) * 2 * turnSpeed * deltaTime;
	}
	// Turn up
	else if (weightUp > weightDown) {
		agents[id.x].angles.y -= randomSteerStrength * turnSpeed/2 * deltaTime;
	}
	// Turn right
	else if (weightDown > weightUp) {
		agents[id.x].angles.y += randomSteerStrength * turnSpeed/2 * deltaTime;
	}


	// Update position	
	// float3 direction = float3(cos(agent.angles.x)*sin(agent.angles.y), sin(agent.angles.x)*sin(agent.angles.y), cos(agent.angles.y));
	float3 direction = float3(cos(agent.angles.x), sin(agent.angles.x), cos(agent.angles.y));
	float3 newPos = agent.position + direction * deltaTime * settings.moveSpeed;

	
	// Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height || newPos.z >= depth || newPos.z < 0) {
		random = hash(random);
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		newPos.x = min(width-1,max(0, newPos.x));
		newPos.y = min(height-1,max(0, newPos.y));
		newPos.z = min(depth-1,max(0, newPos.z));
		agents[id.x].angles = float2(randomAngle, randomAngle);
	}
	else {
		float4 oldTrail = TrailMap[int3(newPos.x,newPos.y,newPos.z)];
		TrailMap[int3(newPos.x,newPos.y,newPos.z)] = min(1, oldTrail + float4(agent.speciesMask.xyz,1.0) * trailWeight * deltaTime);
		// TrailMap[int3(newPos.x,newPos.y,newPos.z)] = 1;
	}
	
	agents[id.x].position = newPos;
}

#pragma kernel Diffuse

float decayRate;
float diffuseRate;
RWTexture3D<float4> DiffusedTrailMap;

[numthreads(8,8,1)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height || id.z < 0 || id.z >= (uint)depth) {
		return;
	}

	float4 sum = 0;
	float4 originalCol = TrailMap[int3(id.x,id.y,id.z)];
	// 3x3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			for (int offsetZ = -1; offsetZ <= 1; offsetZ ++) {
				int sampleX = min(width-1, max(0, id.x + offsetX));
				int sampleY = min(height-1, max(0, id.y + offsetY));
				int sampleZ = min(depth-1, max(0, id.z + offsetZ));
				sum += TrailMap[int3(sampleX,sampleY,sampleZ)];
			}
		}
	}

	float4 blurredCol = sum / 27;
	float diffuseWeight = saturate(diffuseRate * deltaTime);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

	//DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
	DiffusedTrailMap[int3(id.x,id.y,id.z)] = max(0, blurredCol - decayRate * deltaTime);
}
